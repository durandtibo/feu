name: Test - Install Packages
on:
  workflow_call:
  workflow_dispatch:  # to trigger manually

jobs:
  jax:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11', '3.10', '3.9' ]
        jax-version: [ 0.4.31, 0.4.30, 0.4.17, 0.4.6 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Find closest valid version
        id: python-package
        uses: durandtibo/python-package-action@v0.1.0
        with:
          package-name: 'jax'
          package-version: ${{ matrix.jax-version }}
          python-version: ${{ matrix.python-version }}

      - name: Print closest valid version
        run: echo '${{ toJSON(steps.python-package.outputs) }}'

      - name: Install packages
        run: |
          pip install feu
          python -c "from feu import install_package; install_package('jax', '${{ steps.python-package.outputs.closest-valid-version }}')"

      - name: Run functional tests
        run: |
          pip install pytest coola
          python -m pytest tests/functional


  numpy:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11', '3.10', '3.9' ]
        numpy-version: [ 2.1.1, 2.0.2, 1.26.4, 1.25.2, 1.24.3, 1.23.5, 1.22.4, 1.21.6, 1.20.3 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Find closest valid version
        id: python-package
        uses: durandtibo/python-package-action@v0.1.0
        with:
          package-name: 'numpy'
          package-version: ${{ matrix.numpy-version }}
          python-version: ${{ matrix.python-version }}

      - name: Print closest valid version
        run: echo '${{ toJSON(steps.python-package.outputs) }}'

      - name: Install packages
        run: |
          pip install numpy==${{ steps.python-package.outputs.closest-valid-version }}

      - name: Run functional tests
        run: |
          pip install pytest coola
          python -m pytest tests/functional


  pandas:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11', '3.10', '3.9' ]
        pandas-version: [ 2.2.2, 2.1.4, 2.0.3, 1.5.3, 1.4.4, 1.3.5, 1.2.5 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Find closest valid version
        id: python-package
        uses: durandtibo/python-package-action@v0.1.0
        with:
          package-name: 'pandas'
          package-version: ${{ matrix.pandas-version }}
          python-version: ${{ matrix.python-version }}

      - name: Print closest valid version
        run: echo '${{ toJSON(steps.python-package.outputs) }}'

      - name: Install packages
        run: |
          pip install feu
          python -c "from feu import install_package; install_package('pandas', '${{ steps.python-package.outputs.closest-valid-version }}')"

      - name: Run functional tests
        run: |
          pip install pytest coola
          python -m pytest tests/functional


  pyarrow:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11', '3.10', '3.9' ]
        pyarrow-version: [ 17.0.0, 16.1.0, 15.0.2, 14.0.2, 13.0.0, 12.0.1, 11.0.0, 10.0.1, 9.0.0, 8.0.0, 7.0.0, 6.0.1, 5.0.0, 4.0.1, 3.0.0, 2.0.0, 1.0.1 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Find closest valid version
        id: python-package
        uses: durandtibo/python-package-action@v0.1.0
        with:
          package-name: 'pyarrow'
          package-version: ${{ matrix.pyarrow-version }}
          python-version: ${{ matrix.python-version }}

      - name: Print closest valid version
        run: echo '${{ toJSON(steps.python-package.outputs) }}'

      - name: Install packages
        run: |
          pip install feu
          python -c "from feu import install_package; install_package('pyarrow', '${{ steps.python-package.outputs.closest-valid-version }}')"

      - name: Run functional tests
        run: |
          pip install pytest coola
          python -m pytest tests/functional


  torch:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11', '3.10', '3.9' ]
        torch-version: [ 2.4.1, 2.3.1, 2.2.2, 2.1.2, 2.0.1, 1.13.1, 1.12.1, 1.11.0, 1.10.2 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Find closest valid version
        id: python-package
        uses: durandtibo/python-package-action@v0.1.0
        with:
          package-name: 'torch'
          package-version: ${{ matrix.torch-version }}
          python-version: ${{ matrix.python-version }}

      - name: Print closest valid version
        run: echo '${{ toJSON(steps.python-package.outputs) }}'

      - name: Install packages
        run: |
          pip install torch==${{ steps.python-package.outputs.closest-valid-version }}

      - name: Run functional tests
        run: |
          pip install pytest coola
          python -m pytest tests/functional
