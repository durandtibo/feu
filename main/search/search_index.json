{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>hya</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>hya</code> to a new version will possibly break any code that was using the old version of <code>hya</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>hya</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install feu\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>feu</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'feu[all]'\n</code></pre> <p>This command also installed PyTorch. It is also possible to install the optional packages manually or to select the packages to install.</p> <pre><code>pip install feu torch\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>feu</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/feu.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate feu\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>feu</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/install/","title":"Install","text":""},{"location":"refs/install/#feu.install","title":"feu.install","text":"<p>Contain utility functions to install packages.</p>"},{"location":"refs/install/#feu.install.BaseInstaller","title":"feu.install.BaseInstaller","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a package installer.</p>"},{"location":"refs/install/#feu.install.BaseInstaller.install","title":"feu.install.BaseInstaller.install  <code>abstractmethod</code>","text":"<pre><code>install(version: str) -&gt; None\n</code></pre> <p>Install the given package version.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The target version to install.</p> required"},{"location":"refs/install/#feu.install.DefaultInstaller","title":"feu.install.DefaultInstaller","text":"<p>               Bases: <code>BaseInstaller</code></p> <p>Implement a generic package installer.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the package to install.</p> required"},{"location":"refs/install/#feu.install.JaxInstaller","title":"feu.install.JaxInstaller","text":"<p>               Bases: <code>BaseInstaller</code></p> <p>Implement the <code>jax</code> package installer.</p> <p><code>numpy</code> 2.0 support was added in <code>jax</code> 0.4.26.</p>"},{"location":"refs/install/#feu.install.MatplotlibInstaller","title":"feu.install.MatplotlibInstaller","text":"<p>               Bases: <code>Numpy2Installer</code></p> <p>Implement the <code>matplotlib</code> package installer.</p> <p><code>numpy</code> 2.0 support was added in <code>matplotlib</code> 3.8.4.</p>"},{"location":"refs/install/#feu.install.Numpy2Installer","title":"feu.install.Numpy2Installer","text":"<p>               Bases: <code>BaseInstaller</code></p> <p>Define a package installer to install package that did not pin <code>numpy&lt;2.0</code> and are not fully compatible with numpy.</p> <p>https://github.com/numpy/numpy/issues/26191 indicates the packages that are compatible with numpy 2.0.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the package to install.</p> required <code>min_version</code> <code>str</code> <p>The first version that is fully compatible with numpy 2.0.</p> required"},{"location":"refs/install/#feu.install.PackageInstaller","title":"feu.install.PackageInstaller","text":"<p>Implement the main package installer.</p>"},{"location":"refs/install/#feu.install.PackageInstaller.add_installer","title":"feu.install.PackageInstaller.add_installer  <code>classmethod</code>","text":"<pre><code>add_installer(\n    package: str,\n    installer: BaseInstaller,\n    exist_ok: bool = False,\n) -&gt; None\n</code></pre> <p>Add an installer for a given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name.</p> required <code>installer</code> <code>BaseInstaller</code> <p>The installer used for the given package.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>False</code>, <code>RuntimeError</code> is raised if the package already exists. This parameter should be set to <code>True</code> to overwrite the installer for a package.</p> <code>False</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if an installer is already registered for the package name and <code>exist_ok=False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import PackageInstaller, PandasInstaller\n&gt;&gt;&gt; PackageInstaller.add_installer(\"pandas\", PandasInstaller(), exist_ok=True)\n</code></pre>"},{"location":"refs/install/#feu.install.PackageInstaller.has_installer","title":"feu.install.PackageInstaller.has_installer  <code>classmethod</code>","text":"<pre><code>has_installer(package: str) -&gt; bool\n</code></pre> <p>Indicate if an installer is registered for the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if an installer is registered, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import PackageInstaller\n&gt;&gt;&gt; PackageInstaller.has_installer(\"pandas\")\n</code></pre>"},{"location":"refs/install/#feu.install.PackageInstaller.install","title":"feu.install.PackageInstaller.install  <code>classmethod</code>","text":"<pre><code>install(package: str, version: str) -&gt; None\n</code></pre> <p>Install a package and associated packages.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name e.g. <code>'pandas'</code>.</p> required <code>version</code> <code>str</code> <p>The target version to install.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import PackageInstaller\n&gt;&gt;&gt; PackageInstaller().install(\"pandas\", \"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.PandasInstaller","title":"feu.install.PandasInstaller","text":"<p>               Bases: <code>Numpy2Installer</code></p> <p>Implement the <code>pandas</code> package installer.</p> <p><code>numpy</code> 2.0 support was added in <code>pandas</code> 2.2.2.</p>"},{"location":"refs/install/#feu.install.ScipyInstaller","title":"feu.install.ScipyInstaller","text":"<p>               Bases: <code>Numpy2Installer</code></p> <p>Implement the <code>scipy</code> package installer.</p> <p><code>numpy</code> 2.0 support was added in <code>scipy</code> 1.13.0.</p>"},{"location":"refs/install/#feu.install.TorchInstaller","title":"feu.install.TorchInstaller","text":"<p>               Bases: <code>Numpy2Installer</code></p> <p>Implement the <code>torch</code> package installer.</p> <p><code>numpy</code> 2.0 support was added in <code>torch</code> 2.3.0.</p>"},{"location":"refs/install/#feu.install.XarrayInstaller","title":"feu.install.XarrayInstaller","text":"<p>               Bases: <code>Numpy2Installer</code></p> <p>Implement the <code>xarray</code> package installer.</p> <p><code>numpy</code> 2.0 support was added in <code>xarray</code> 2024.6.0.</p>"},{"location":"refs/install/#feu.install.install_package","title":"feu.install.install_package","text":"<pre><code>install_package(package: str, version: str) -&gt; None\n</code></pre> <p>Install a package and associated packages.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name e.g. <code>'pandas'</code>.</p> required <code>version</code> <code>str</code> <p>The target version to install.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import install_package\n&gt;&gt;&gt; install_package(\"pandas\", \"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.run_bash_command","title":"feu.install.run_bash_command","text":"<pre><code>run_bash_command(cmd: str) -&gt; None\n</code></pre> <p>Execute a bash command.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>The command to run.</p> required"},{"location":"refs/root/","title":"Main functions","text":""},{"location":"refs/root/#feu","title":"feu","text":"<p>Root package of <code>feu</code>.</p>"},{"location":"refs/root/#feu.compare_version","title":"feu.compare_version","text":"<pre><code>compare_version(\n    package: str, op: Callable, version: str\n) -&gt; bool\n</code></pre> <p>Compare a package version to a given version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package to check.</p> required <code>op</code> <code>Callable</code> <p>Specifies the comparison operator.</p> required <code>version</code> <code>str</code> <p>Specifies the version to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The comparison status.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; from feu import compare_version\n&gt;&gt;&gt; compare_version(\"pytest\", op=operator.ge, version=\"7.3.0\")\nTrue\n</code></pre>"},{"location":"refs/root/#feu.get_package_version","title":"feu.get_package_version","text":"<pre><code>get_package_version(package: str) -&gt; Version | None\n</code></pre> <p>Get the package version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package name.</p> required <p>Returns:</p> Type Description <code>Version | None</code> <p>The package version.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import get_package_version\n&gt;&gt;&gt; get_package_version(\"pytest\")\n&lt;Version('...')&gt;\n</code></pre>"},{"location":"refs/root/#feu.install_package","title":"feu.install_package","text":"<pre><code>install_package(package: str, version: str) -&gt; None\n</code></pre> <p>Install a package and associated packages.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name e.g. <code>'pandas'</code>.</p> required <code>version</code> <code>str</code> <p>The target version to install.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import install_package\n&gt;&gt;&gt; install_package(\"pandas\", \"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/root/#feu.is_module_available","title":"feu.is_module_available  <code>cached</code>","text":"<pre><code>is_module_available(module: str) -&gt; bool\n</code></pre> <p>Check if a module path is available.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> <p>Specifies the module to check.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import is_module_available\n&gt;&gt;&gt; is_module_available(\"os\")\nTrue\n&gt;&gt;&gt; is_module_available(\"os.path\")\nTrue\n&gt;&gt;&gt; is_module_available(\"missing.module\")\nFalse\n</code></pre>"},{"location":"refs/root/#feu.is_package_available","title":"feu.is_package_available  <code>cached</code>","text":"<pre><code>is_package_available(package: str) -&gt; bool\n</code></pre> <p>Check if a package is available.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package name to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the package is available, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import is_package_available\n&gt;&gt;&gt; is_package_available(\"os\")\nTrue\n&gt;&gt;&gt; is_package_available(\"os.path\")\nTrue\n&gt;&gt;&gt; is_package_available(\"my_missing_package\")\nFalse\n</code></pre>"}]}