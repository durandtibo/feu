{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>hya</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>hya</code> to a new version will possibly break any code that was using the old version of <code>hya</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>hya</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install feu\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>feu</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'feu[all]'\n</code></pre> <p>This command also installed PyTorch. It is also possible to install the optional packages manually or to select the packages to install.</p> <pre><code>pip install feu torch\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>feu</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/feu.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate feu\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>feu</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/git/","title":"Git","text":""},{"location":"refs/git/#feu.git","title":"feu.git","text":"<p>Contain git utility functions.</p>"},{"location":"refs/git/#feu.git.get_last_tag_name","title":"feu.git.get_last_tag_name","text":"<pre><code>get_last_tag_name() -&gt; str\n</code></pre> <p>Get the name of the most recent tag in the current repository.</p> <p>Returns:</p> Type Description <code>str</code> <p>The tag name.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.git import get_last_tag_name\n&gt;&gt;&gt; tag = get_last_tag_name()\n&gt;&gt;&gt; tag\n</code></pre>"},{"location":"refs/git/#feu.git.get_last_version_tag_name","title":"feu.git.get_last_version_tag_name","text":"<pre><code>get_last_version_tag_name() -&gt; str\n</code></pre> <p>Get the name of the most recent version tag in the current repository.</p> <p>A version tag is a tag starting with <code>v{number}*</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>The tag name.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.git import get_last_version_tag_name\n&gt;&gt;&gt; tag = get_last_version_tag_name()\n&gt;&gt;&gt; tag\n</code></pre>"},{"location":"refs/git/#feu.git.get_tags","title":"feu.git.get_tags","text":"<pre><code>get_tags() -&gt; list[TagReference]\n</code></pre> <p>Get the list of git tags sorted by date/time for the current repository.</p> <p>Returns:</p> Type Description <code>list[TagReference]</code> <p>The list of git tags sorted by date/time.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.git import get_tags\n&gt;&gt;&gt; tags = get_tags()\n&gt;&gt;&gt; tags\n</code></pre>"},{"location":"refs/imports/","title":"Imports","text":""},{"location":"refs/imports/#feu.imports","title":"feu.imports","text":"<p>Contain to check if a package or module is available.</p>"},{"location":"refs/imports/#feu.imports.check_click","title":"feu.imports.check_click","text":"<pre><code>check_click() -&gt; None\n</code></pre> <p>Check if the <code>click</code> package is installed.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if the <code>click</code> package is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.imports import check_click\n&gt;&gt;&gt; check_click()\n</code></pre>"},{"location":"refs/imports/#feu.imports.check_git","title":"feu.imports.check_git","text":"<pre><code>check_git() -&gt; None\n</code></pre> <p>Check if the <code>git</code> package is installed.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if the <code>git</code> package is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.imports import check_git\n&gt;&gt;&gt; check_git()\n</code></pre>"},{"location":"refs/imports/#feu.imports.check_requests","title":"feu.imports.check_requests","text":"<pre><code>check_requests() -&gt; None\n</code></pre> <p>Check if the <code>requests</code> package is installed.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if the <code>requests</code> package is not installed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.imports import check_requests\n&gt;&gt;&gt; check_requests()\n</code></pre>"},{"location":"refs/imports/#feu.imports.is_click_available","title":"feu.imports.is_click_available  <code>cached</code>","text":"<pre><code>is_click_available() -&gt; bool\n</code></pre> <p>Indicate if the <code>click</code> package is installed or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>click</code> is available otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.imports import is_click_available\n&gt;&gt;&gt; is_click_available()\n</code></pre>"},{"location":"refs/imports/#feu.imports.is_git_available","title":"feu.imports.is_git_available  <code>cached</code>","text":"<pre><code>is_git_available() -&gt; bool\n</code></pre> <p>Indicate if the <code>git</code> package is installed or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>git</code> is available otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.imports import is_git_available\n&gt;&gt;&gt; is_git_available()\n</code></pre>"},{"location":"refs/imports/#feu.imports.is_module_available","title":"feu.imports.is_module_available  <code>cached</code>","text":"<pre><code>is_module_available(module: str) -&gt; bool\n</code></pre> <p>Check if a module path is available.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> <p>The module to check.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import is_module_available\n&gt;&gt;&gt; is_module_available(\"os\")\nTrue\n&gt;&gt;&gt; is_module_available(\"os.path\")\nTrue\n&gt;&gt;&gt; is_module_available(\"missing.module\")\nFalse\n</code></pre>"},{"location":"refs/imports/#feu.imports.is_package_available","title":"feu.imports.is_package_available  <code>cached</code>","text":"<pre><code>is_package_available(package: str) -&gt; bool\n</code></pre> <p>Check if a package is available.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the package is available, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import is_package_available\n&gt;&gt;&gt; is_package_available(\"os\")\nTrue\n&gt;&gt;&gt; is_package_available(\"os.path\")\nTrue\n&gt;&gt;&gt; is_package_available(\"my_missing_package\")\nFalse\n</code></pre>"},{"location":"refs/imports/#feu.imports.is_requests_available","title":"feu.imports.is_requests_available  <code>cached</code>","text":"<pre><code>is_requests_available() -&gt; bool\n</code></pre> <p>Indicate if the <code>requests</code> package is installed or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>requests</code> is available otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.imports import is_requests_available\n&gt;&gt;&gt; is_requests_available()\n</code></pre>"},{"location":"refs/install/","title":"Install","text":""},{"location":"refs/install/#feu.install","title":"feu.install","text":"<p>Contain package installers.</p>"},{"location":"refs/install/#feu.install.BaseInstaller","title":"feu.install.BaseInstaller","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a package installer.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip import PipInstaller\n&gt;&gt;&gt; installer = PipInstaller()\n&gt;&gt;&gt; installer.install(package=\"pandas\", version=\"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.BaseInstaller.install","title":"feu.install.BaseInstaller.install  <code>abstractmethod</code>","text":"<pre><code>install(package: str, version: str, args: str = '') -&gt; None\n</code></pre> <p>Install the given package version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the package.</p> required <code>version</code> <code>str</code> <p>The target version to install.</p> required <code>args</code> <code>str</code> <p>Optional arguments to pass to the package installer. The list of valid arguments depend on the package installer.</p> <code>''</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip import PipInstaller\n&gt;&gt;&gt; installer = PipInstaller()\n&gt;&gt;&gt; installer.install(package=\"pandas\", version=\"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.InstallerRegistry","title":"feu.install.InstallerRegistry","text":"<p>Implement the main installer registry.</p>"},{"location":"refs/install/#feu.install.InstallerRegistry.add_installer","title":"feu.install.InstallerRegistry.add_installer  <code>classmethod</code>","text":"<pre><code>add_installer(\n    name: str,\n    installer: BaseInstaller,\n    exist_ok: bool = False,\n) -&gt; None\n</code></pre> <p>Add an installer for a given package.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The installer name e.g. pip or uv.</p> required <code>installer</code> <code>BaseInstaller</code> <p>The installer used for the given package.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>False</code>, <code>RuntimeError</code> is raised if the package already exists. This parameter should be set to <code>True</code> to overwrite the installer for a package.</p> <code>False</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if an installer is already registered for the package name and <code>exist_ok=False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import InstallerRegistry\n&gt;&gt;&gt; from feu.install.pip import PipInstaller\n&gt;&gt;&gt; InstallerRegistry.add_installer(\"pip\", PipInstaller(), exist_ok=True)\n</code></pre>"},{"location":"refs/install/#feu.install.InstallerRegistry.has_installer","title":"feu.install.InstallerRegistry.has_installer  <code>classmethod</code>","text":"<pre><code>has_installer(name: str) -&gt; bool\n</code></pre> <p>Indicate if an installer is registered for the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The installer name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if an installer is registered, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import InstallerRegistry\n&gt;&gt;&gt; InstallerRegistry.has_installer(\"pip\")\nTrue\n</code></pre>"},{"location":"refs/install/#feu.install.InstallerRegistry.install","title":"feu.install.InstallerRegistry.install  <code>classmethod</code>","text":"<pre><code>install(\n    installer: str,\n    package: str,\n    version: str,\n    args: str = \"\",\n) -&gt; None\n</code></pre> <p>Install a package and associated packages by using the secified installer.</p> <p>Parameters:</p> Name Type Description Default <code>installer</code> <code>str</code> <p>The package installer name to use to install the packages.</p> required <code>package</code> <code>str</code> <p>The target package to install.</p> required <code>version</code> <code>str</code> <p>The target version of the package to install.</p> required <code>args</code> <code>str</code> <p>Optional arguments to pass to the package installer. The list of valid arguments depend on the package installer.</p> <code>''</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import InstallerRegistry\n&gt;&gt;&gt; InstallerRegistry.install(\n...     installer=\"pip\", package=\"pandas\", version=\"2.2.2\"\n... )  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.get_available_installers","title":"feu.install.get_available_installers  <code>cached</code>","text":"<pre><code>get_available_installers() -&gt; tuple[str, ...]\n</code></pre> <p>Get the available installers.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>The available installers.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import get_available_installers\n&gt;&gt;&gt; get_available_installers()\n(...)\n</code></pre>"},{"location":"refs/install/#feu.install.install_package","title":"feu.install.install_package","text":"<pre><code>install_package(\n    installer: str,\n    package: str,\n    version: str,\n    args: str = \"\",\n) -&gt; None\n</code></pre> <p>Install a package and associated packages by using the secified installer.</p> <p>Parameters:</p> Name Type Description Default <code>installer</code> <code>str</code> <p>The package installer name to use to install the packages.</p> required <code>package</code> <code>str</code> <p>The target package to install.</p> required <code>version</code> <code>str</code> <p>The target version of the package to install.</p> required <code>args</code> <code>str</code> <p>Optional arguments to pass to the package installer. The list of valid arguments depend on the package installer.</p> <code>''</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import install_package\n&gt;&gt;&gt; install_package(installer=\"pip\", package=\"pandas\", version=\"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.is_pip_available","title":"feu.install.is_pip_available  <code>cached</code>","text":"<pre><code>is_pip_available() -&gt; bool\n</code></pre> <p>Check if <code>pip</code> is available.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>pip</code> is available, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import is_pip_available\n&gt;&gt;&gt; is_pip_available()\n</code></pre>"},{"location":"refs/install/#feu.install.is_pipx_available","title":"feu.install.is_pipx_available  <code>cached</code>","text":"<pre><code>is_pipx_available() -&gt; bool\n</code></pre> <p>Check if <code>pipx</code> is available.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>pipx</code> is available, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import is_pipx_available\n&gt;&gt;&gt; is_pipx_available()\n</code></pre>"},{"location":"refs/install/#feu.install.is_uv_available","title":"feu.install.is_uv_available  <code>cached</code>","text":"<pre><code>is_uv_available() -&gt; bool\n</code></pre> <p>Check if <code>uv</code> is available.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if <code>uv</code> is available, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import is_uv_available\n&gt;&gt;&gt; is_uv_available()\n</code></pre>"},{"location":"refs/install/#feu.install.pip","title":"feu.install.pip","text":"<p>Contain functionalities to install packages with pip or compatible package installers.</p>"},{"location":"refs/install/#feu.install.pip.PipInstaller","title":"feu.install.pip.PipInstaller","text":"<p>               Bases: <code>BasePipInstaller</code></p> <p>Implement a pip package installer.</p>"},{"location":"refs/install/#feu.install.pip.PipxInstaller","title":"feu.install.pip.PipxInstaller","text":"<p>               Bases: <code>BasePipInstaller</code></p> <p>Implement a pipx package installer.</p>"},{"location":"refs/install/#feu.install.pip.UvInstaller","title":"feu.install.pip.UvInstaller","text":"<p>               Bases: <code>BasePipInstaller</code></p> <p>Implement a uv package installer.</p>"},{"location":"refs/install/#feu.install.pip.command","title":"feu.install.pip.command","text":"<p>Contain command generators to install packages.</p>"},{"location":"refs/install/#feu.install.pip.command.BaseCommandGenerator","title":"feu.install.pip.command.BaseCommandGenerator","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to generate a command to install packages with pip or compatible package installer.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; gen = PipCommandGenerator()\n&gt;&gt;&gt; gen\nPipCommandGenerator()\n&gt;&gt;&gt; cmd = gen.generate([\"numpy\", \"pandas&gt;=2.0,&lt;3.0\"])\n&gt;&gt;&gt; cmd\npip install numpy pandas&gt;=2.0,&lt;3.0\n</code></pre>"},{"location":"refs/install/#feu.install.pip.command.BaseCommandGenerator.equal","title":"feu.install.pip.command.BaseCommandGenerator.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Indicate if two command generators are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The other object to compare.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two command generators are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator, PipxCommandGenerator\n&gt;&gt;&gt; obj1 = PipCommandGenerator()\n&gt;&gt;&gt; obj2 = PipCommandGenerator()\n&gt;&gt;&gt; obj3 = PipxCommandGenerator()\n&gt;&gt;&gt; obj1.equal(obj2)\nTrue\n&gt;&gt;&gt; obj1.equal(obj3)\nFalse\n</code></pre>"},{"location":"refs/install/#feu.install.pip.command.BaseCommandGenerator.generate","title":"feu.install.pip.command.BaseCommandGenerator.generate  <code>abstractmethod</code>","text":"<pre><code>generate(packages: Sequence[str], args: str = '') -&gt; str\n</code></pre> <p>Generate a command to install the specified packages.</p> <p>Parameters:</p> Name Type Description Default <code>packages</code> <code>Sequence[str]</code> <p>The tuple of packages to install. It is also possible to specify the version constraints.</p> required <code>args</code> <code>str</code> <p>Optional arguments to pass to the package installer. The list of valid arguments depend on the package installer.</p> <code>''</code> <p>Returns:</p> Type Description <code>str</code> <p>The generated command.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; gen = PipCommandGenerator()\n&gt;&gt;&gt; cmd = gen.generate([\"numpy\", \"pandas&gt;=2.0,&lt;3.0\"])\n&gt;&gt;&gt; cmd\npip install numpy pandas&gt;=2.0,&lt;3.0\n</code></pre>"},{"location":"refs/install/#feu.install.pip.command.PipCommandGenerator","title":"feu.install.pip.command.PipCommandGenerator","text":"<p>               Bases: <code>BaseCommandGenerator</code></p> <p>Define a command generator for <code>pip</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; gen = PipCommandGenerator()\n&gt;&gt;&gt; gen\nPipCommandGenerator()\n&gt;&gt;&gt; cmd = gen.generate([\"numpy\", \"pandas&gt;=2.0,&lt;3.0\"])\n&gt;&gt;&gt; cmd\npip install numpy pandas&gt;=2.0,&lt;3.0\n</code></pre>"},{"location":"refs/install/#feu.install.pip.command.PipxCommandGenerator","title":"feu.install.pip.command.PipxCommandGenerator","text":"<p>               Bases: <code>BaseCommandGenerator</code></p> <p>Define a command generator for <code>pipx</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipxCommandGenerator\n&gt;&gt;&gt; gen = PipxCommandGenerator()\n&gt;&gt;&gt; gen\nPipxCommandGenerator()\n&gt;&gt;&gt; cmd = gen.generate([\"numpy\", \"pandas&gt;=2.0,&lt;3.0\"])\n&gt;&gt;&gt; cmd\npipx install numpy pandas&gt;=2.0,&lt;3.0\n</code></pre>"},{"location":"refs/install/#feu.install.pip.command.UvCommandGenerator","title":"feu.install.pip.command.UvCommandGenerator","text":"<p>               Bases: <code>BaseCommandGenerator</code></p> <p>Define a command generator for <code>uv</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import UvCommandGenerator\n&gt;&gt;&gt; gen = UvCommandGenerator()\n&gt;&gt;&gt; gen\nUvCommandGenerator()\n&gt;&gt;&gt; cmd = gen.generate([\"numpy\", \"pandas&gt;=2.0,&lt;3.0\"])\n&gt;&gt;&gt; cmd\nuv pip install numpy pandas&gt;=2.0,&lt;3.0\n</code></pre>"},{"location":"refs/install/#feu.install.pip.installer","title":"feu.install.pip.installer","text":"<p>Define the pip compatible installers.</p>"},{"location":"refs/install/#feu.install.pip.installer.BasePipInstaller","title":"feu.install.pip.installer.BasePipInstaller","text":"<p>               Bases: <code>BaseInstaller</code></p> <p>Define an intermediate base class to implement package installer.</p>"},{"location":"refs/install/#feu.install.pip.installer.BasePipInstaller.add_installer","title":"feu.install.pip.installer.BasePipInstaller.add_installer  <code>classmethod</code>","text":"<pre><code>add_installer(\n    package: str,\n    installer: BasePackageInstaller,\n    exist_ok: bool = False,\n) -&gt; None\n</code></pre> <p>Add an installer for a given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name.</p> required <code>installer</code> <code>BasePackageInstaller</code> <p>The installer used for the given package.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>False</code>, <code>RuntimeError</code> is raised if the package already exists. This parameter should be set to <code>True</code> to overwrite the installer for a package.</p> <code>False</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if an installer is already registered for the package name and <code>exist_ok=False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip import PipInstaller\n&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; from feu.install.pip.resolver import PandasDependencyResolver\n&gt;&gt;&gt; PipInstaller.add_installer(\n...     \"pandas\",\n...     PackageInstaller(\n...         resolver=PandasDependencyResolver(), command=PipCommandGenerator()\n...     ),\n...     exist_ok=True,\n... )\n</code></pre>"},{"location":"refs/install/#feu.install.pip.installer.BasePipInstaller.has_installer","title":"feu.install.pip.installer.BasePipInstaller.has_installer  <code>classmethod</code>","text":"<pre><code>has_installer(package: str) -&gt; bool\n</code></pre> <p>Indicate if an installer is registered for the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if an installer is registered, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip import PipInstaller\n&gt;&gt;&gt; PipInstaller.has_installer(\"pandas\")\n</code></pre>"},{"location":"refs/install/#feu.install.pip.installer.PipInstaller","title":"feu.install.pip.installer.PipInstaller","text":"<p>               Bases: <code>BasePipInstaller</code></p> <p>Implement a pip package installer.</p>"},{"location":"refs/install/#feu.install.pip.installer.PipxInstaller","title":"feu.install.pip.installer.PipxInstaller","text":"<p>               Bases: <code>BasePipInstaller</code></p> <p>Implement a pipx package installer.</p>"},{"location":"refs/install/#feu.install.pip.installer.UvInstaller","title":"feu.install.pip.installer.UvInstaller","text":"<p>               Bases: <code>BasePipInstaller</code></p> <p>Implement a uv package installer.</p>"},{"location":"refs/install/#feu.install.pip.package","title":"feu.install.pip.package","text":"<p>Contain package installers.</p>"},{"location":"refs/install/#feu.install.pip.package.BasePackageInstaller","title":"feu.install.pip.package.BasePackageInstaller","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a package installer.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; from feu.install.pip.package import PackageInstaller\n&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; installer = PackageInstaller(\n...     resolver=DependencyResolver(\"numpy\"), command=PipCommandGenerator()\n... )\n&gt;&gt;&gt; installer\nPackageInstaller(resolver=DependencyResolver(package=numpy), command=PipCommandGenerator())\n&gt;&gt;&gt; installer.install(\"2.3.1\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.pip.package.BasePackageInstaller.equal","title":"feu.install.pip.package.BasePackageInstaller.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Indicate if two package installers are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The other object to compare.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two package installers are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; from feu.install.pip.package import PackageInstaller\n&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; obj1 = PackageInstaller(\n...     resolver=DependencyResolver(\"numpy\"), command=PipCommandGenerator()\n... )\n&gt;&gt;&gt; obj2 = PackageInstaller(\n...     resolver=DependencyResolver(\"numpy\"), command=PipCommandGenerator()\n... )\n&gt;&gt;&gt; obj3 = PackageInstaller(\n...     resolver=DependencyResolver(\"torch\"), command=PipCommandGenerator()\n... )\n&gt;&gt;&gt; obj1.equal(obj2)\nTrue\n&gt;&gt;&gt; obj1.equal(obj3)\nFalse\n</code></pre>"},{"location":"refs/install/#feu.install.pip.package.BasePackageInstaller.install","title":"feu.install.pip.package.BasePackageInstaller.install  <code>abstractmethod</code>","text":"<pre><code>install(version: str, args: str = '') -&gt; None\n</code></pre> <p>Install the given version of the package.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The target version to install.</p> required <code>args</code> <code>str</code> <p>Optional arguments to pass to the package installer. The list of valid arguments depend on the package installer.</p> <code>''</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; from feu.install.pip.package import PackageInstaller\n&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; installer = PackageInstaller(\n...     resolver=DependencyResolver(\"numpy\"), command=PipCommandGenerator()\n... )\n&gt;&gt;&gt; installer.install(\"2.3.1\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.pip.package.PackageInstaller","title":"feu.install.pip.package.PackageInstaller","text":"<p>               Bases: <code>BasePackageInstaller</code></p> <p>Implement a generic package installer.</p> <p>Parameters:</p> Name Type Description Default <code>resolver</code> <code>BaseDependencyResolver</code> <p>The dependency resolver to get the list of packages to install.</p> required <code>command</code> <code>BaseCommandGenerator</code> <p>The command generator to install the packages.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; from feu.install.pip.package import PackageInstaller\n&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; installer = PackageInstaller(\n...     resolver=DependencyResolver(\"numpy\"), command=PipCommandGenerator()\n... )\n&gt;&gt;&gt; installer\nPackageInstaller(resolver=DependencyResolver(package=numpy), command=PipCommandGenerator())\n&gt;&gt;&gt; installer.install(\"2.3.1\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/install/#feu.install.pip.package.create_package_installer_mapping","title":"feu.install.pip.package.create_package_installer_mapping","text":"<pre><code>create_package_installer_mapping(\n    command: BaseCommandGenerator,\n) -&gt; dict[str, BasePackageInstaller]\n</code></pre> <p>Create the default package installer mapping.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>BaseCommandGenerator</code> <p>The command generator uses to install the command.</p> required <p>Returns:</p> Type Description <code>dict[str, BasePackageInstaller]</code> <p>The mapping package installers, where the keys are the package names and the values are the package installers.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.command import PipCommandGenerator\n&gt;&gt;&gt; from feu.install.pip.package import create_package_installer_mapping\n&gt;&gt;&gt; installers = create_package_installer_mapping(command=PipCommandGenerator())\n&gt;&gt;&gt; installers\n{'jax': PackageInstaller(resolver=JaxDependencyResolver(), command=PipCommandGenerator()),\n ...\n 'xarray': PackageInstaller(resolver=XarrayDependencyResolver(), command=PipCommandGenerator())}\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver","title":"feu.install.pip.resolver","text":"<p>Contain pip compatible package dependency resolvers.</p>"},{"location":"refs/install/#feu.install.pip.resolver.BaseDependencyResolver","title":"feu.install.pip.resolver.BaseDependencyResolver","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a pip package installer.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; resolver = DependencyResolver(\"numpy\")\n&gt;&gt;&gt; resolver\nDependencyResolver(package=numpy)\n&gt;&gt;&gt; deps = resolver.resolve(\"2.3.1\")\n&gt;&gt;&gt; deps\n('numpy==2.3.1',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.BaseDependencyResolver.equal","title":"feu.install.pip.resolver.BaseDependencyResolver.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any) -&gt; bool\n</code></pre> <p>Indicate if two dependency resolvers are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The other object to compare.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two dependency resolvers are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver, TorchDependencyResolver\n&gt;&gt;&gt; obj1 = DependencyResolver(\"numpy\")\n&gt;&gt;&gt; obj2 = DependencyResolver(\"numpy\")\n&gt;&gt;&gt; obj3 = TorchDependencyResolver()\n&gt;&gt;&gt; obj1.equal(obj2)\nTrue\n&gt;&gt;&gt; obj1.equal(obj3)\nFalse\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.BaseDependencyResolver.resolve","title":"feu.install.pip.resolver.BaseDependencyResolver.resolve  <code>abstractmethod</code>","text":"<pre><code>resolve(version: str) -&gt; tuple[str, ...]\n</code></pre> <p>Find the dependency packages and their versions to install the specific version of a package.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The target version of the package to install.</p> required <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>The tuple of packages and versions constraints.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; resolver = DependencyResolver(\"numpy\")\n&gt;&gt;&gt; deps = resolver.resolve(\"2.3.1\")\n&gt;&gt;&gt; deps\n('numpy==2.3.1',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.DependencyResolver","title":"feu.install.pip.resolver.DependencyResolver","text":"<p>               Bases: <code>BaseDependencyResolver</code></p> <p>Define the default package dependency resolver.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the target package to install.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import DependencyResolver\n&gt;&gt;&gt; resolver = DependencyResolver(\"numpy\")\n&gt;&gt;&gt; resolver\nDependencyResolver(package=numpy)\n&gt;&gt;&gt; deps = resolver.resolve(\"2.3.1\")\n&gt;&gt;&gt; deps\n('numpy==2.3.1',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.JaxDependencyResolver","title":"feu.install.pip.resolver.JaxDependencyResolver","text":"<p>               Bases: <code>BaseDependencyResolver</code></p> <p>Implement the <code>jax</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>jax</code> 0.4.26.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import JaxDependencyResolver\n&gt;&gt;&gt; resolver = JaxDependencyResolver()\n&gt;&gt;&gt; resolver\nJaxDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"0.4.26\")\n&gt;&gt;&gt; deps\n('jax==0.4.26', 'jaxlib==0.4.26')\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.MatplotlibDependencyResolver","title":"feu.install.pip.resolver.MatplotlibDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>matplotlib</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>matplotlib</code> 3.8.4.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import MatplotlibDependencyResolver\n&gt;&gt;&gt; resolver = MatplotlibDependencyResolver()\n&gt;&gt;&gt; resolver\nMatplotlibDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"3.8.4\")\n&gt;&gt;&gt; deps\n('matplotlib==3.8.4',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.Numpy2DependencyResolver","title":"feu.install.pip.resolver.Numpy2DependencyResolver","text":"<p>               Bases: <code>BaseDependencyResolver</code></p> <p>Define a dependency resolver to work with packages that did not pin <code>numpy&lt;2.0</code> and are not fully compatible with numpy 2.0.</p> <p>https://github.com/numpy/numpy/issues/26191 indicates the packages that are compatible with numpy 2.0.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the package.</p> required <code>min_version</code> <code>str</code> <p>The first version that is fully compatible with numpy 2.0.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import Numpy2DependencyResolver\n&gt;&gt;&gt; resolver = Numpy2DependencyResolver(package=\"my_package\", min_version=\"1.2.3\")\n&gt;&gt;&gt; resolver\nNumpy2DependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"1.2.3\")\n&gt;&gt;&gt; deps\n('my_package==1.2.3',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.PandasDependencyResolver","title":"feu.install.pip.resolver.PandasDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>pandas</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>pandas</code> 2.2.2.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import PandasDependencyResolver\n&gt;&gt;&gt; resolver = PandasDependencyResolver()\n&gt;&gt;&gt; resolver\nPandasDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"2.2.2\")\n&gt;&gt;&gt; deps\n('pandas==2.2.2',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.PyarrowDependencyResolver","title":"feu.install.pip.resolver.PyarrowDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>pyarrow</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>pyarrow</code> 16.0.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import PyarrowDependencyResolver\n&gt;&gt;&gt; resolver = PyarrowDependencyResolver()\n&gt;&gt;&gt; resolver\nPyarrowDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"16.0\")\n&gt;&gt;&gt; deps\n('pyarrow==16.0',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.ScipyDependencyResolver","title":"feu.install.pip.resolver.ScipyDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>scipy</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>scipy</code> 1.13.0.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import ScipyDependencyResolver\n&gt;&gt;&gt; resolver = ScipyDependencyResolver()\n&gt;&gt;&gt; resolver\nScipyDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"1.13.0\")\n&gt;&gt;&gt; deps\n('scipy==1.13.0',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.SklearnDependencyResolver","title":"feu.install.pip.resolver.SklearnDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>scikit-learn</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>scikit-learn</code> 1.4.2.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import SklearnDependencyResolver\n&gt;&gt;&gt; resolver = SklearnDependencyResolver()\n&gt;&gt;&gt; resolver\nSklearnDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"1.4.2\")\n&gt;&gt;&gt; deps\n('scikit-learn==1.4.2',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.TorchDependencyResolver","title":"feu.install.pip.resolver.TorchDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>torch</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>torch</code> 2.3.0.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import TorchDependencyResolver\n&gt;&gt;&gt; resolver = TorchDependencyResolver()\n&gt;&gt;&gt; resolver\nTorchDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"2.3.0\")\n&gt;&gt;&gt; deps\n('torch==2.3.0',)\n</code></pre>"},{"location":"refs/install/#feu.install.pip.resolver.XarrayDependencyResolver","title":"feu.install.pip.resolver.XarrayDependencyResolver","text":"<p>               Bases: <code>Numpy2DependencyResolver</code></p> <p>Implement the <code>xarray</code> dependency resolver.</p> <p><code>numpy</code> 2.0 support was added in <code>xarray</code> 2024.6.0.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install.pip.resolver import XarrayDependencyResolver\n&gt;&gt;&gt; resolver = XarrayDependencyResolver()\n&gt;&gt;&gt; resolver\nXarrayDependencyResolver()\n&gt;&gt;&gt; deps = resolver.resolve(\"2024.6.0\")\n&gt;&gt;&gt; deps\n('xarray==2024.6.0',)\n</code></pre>"},{"location":"refs/package/","title":"Package","text":""},{"location":"refs/package/#feu.package","title":"feu.package","text":"<p>Contain functions to check a package configuration.</p>"},{"location":"refs/package/#feu.package.PackageConfig","title":"feu.package.PackageConfig","text":"<p>Implement the main package config registry.</p>"},{"location":"refs/package/#feu.package.PackageConfig.add_config","title":"feu.package.PackageConfig.add_config  <code>classmethod</code>","text":"<pre><code>add_config(\n    pkg_name: str,\n    pkg_version_min: str | None,\n    pkg_version_max: str | None,\n    python_version: str,\n    exist_ok: bool = False,\n) -&gt; None\n</code></pre> <p>Add a new package configuration.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>pkg_version_min</code> <code>str | None</code> <p>The minimum valid package version for this configuration. <code>None</code> means there is no minimum valid package version.</p> required <code>pkg_version_max</code> <code>str | None</code> <p>The maximum valid package version for this configuration. <code>None</code> means there is no maximum valid package version.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <code>exist_ok</code> <code>bool</code> <p>If <code>False</code>, <code>RuntimeError</code> is raised if a package configuration already exists. This parameter should be  set to <code>True</code> to overwrite the package configuration.</p> <code>False</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if a package configuration is already registered and <code>exist_ok=False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import PackageConfig\n&gt;&gt;&gt; PackageConfig.add_config(\n...     pkg_name=\"my_package\",\n...     python_version=\"3.11\",\n...     pkg_version_min=\"1.2.0\",\n...     pkg_version_max=\"2.0.2\",\n...     exist_ok=True,\n... )\n</code></pre>"},{"location":"refs/package/#feu.package.PackageConfig.find_closest_version","title":"feu.package.PackageConfig.find_closest_version  <code>classmethod</code>","text":"<pre><code>find_closest_version(\n    pkg_name: str, pkg_version: str, python_version: str\n) -&gt; str\n</code></pre> <p>Find the closest valid version given the package name and version, and python version.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>pkg_version</code> <code>str</code> <p>The package version to check.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The closest valid version.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import PackageConfig\n&gt;&gt;&gt; PackageConfig.find_closest_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"2.0.2\",\n...     python_version=\"3.11\",\n... )\n2.0.2\n&gt;&gt;&gt; PackageConfig.find_closest_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"1.0.2\",\n...     python_version=\"3.11\",\n... )\n1.23.2\n</code></pre>"},{"location":"refs/package/#feu.package.PackageConfig.get_config","title":"feu.package.PackageConfig.get_config  <code>classmethod</code>","text":"<pre><code>get_config(\n    pkg_name: str, python_version: str\n) -&gt; dict[str, str]\n</code></pre> <p>Get a package configuration given the package name and python version.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>The package configuration.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import PackageConfig\n&gt;&gt;&gt; PackageConfig.get_config(\n...     pkg_name=\"numpy\",\n...     python_version=\"3.11\",\n... )\n{'min': '1.23.2', 'max': None}\n</code></pre>"},{"location":"refs/package/#feu.package.PackageConfig.get_min_and_max_versions","title":"feu.package.PackageConfig.get_min_and_max_versions  <code>classmethod</code>","text":"<pre><code>get_min_and_max_versions(\n    pkg_name: str, python_version: str\n) -&gt; tuple[Version | None, Version | None]\n</code></pre> <p>Get the minimum and maximum versions for the given package name and python version.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <p>Returns:</p> Type Description <code>tuple[Version | None, Version | None]</code> <p>A tuple with the minimum and maximum versions. The version is set to <code>None</code> if there is no minimum or maximum version.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import PackageConfig\n&gt;&gt;&gt; PackageConfig.get_min_and_max_versions(\n...     pkg_name=\"numpy\",\n...     python_version=\"3.11\",\n... )\n(&lt;Version('1.23.2')&gt;, None)\n</code></pre>"},{"location":"refs/package/#feu.package.PackageConfig.is_valid_version","title":"feu.package.PackageConfig.is_valid_version  <code>classmethod</code>","text":"<pre><code>is_valid_version(\n    pkg_name: str, pkg_version: str, python_version: str\n) -&gt; bool\n</code></pre> <p>Indicate if the specified package version is valid for the given Python version.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>pkg_version</code> <code>str</code> <p>The package version to check.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the specified package version is valid for the given Python version, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import PackageConfig\n&gt;&gt;&gt; PackageConfig.is_valid_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"2.0.2\",\n...     python_version=\"3.11\",\n... )\nTrue\n&gt;&gt;&gt; PackageConfig.is_valid_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"1.0.2\",\n...     python_version=\"3.11\",\n... )\nFalse\n</code></pre>"},{"location":"refs/package/#feu.package.find_closest_version","title":"feu.package.find_closest_version","text":"<pre><code>find_closest_version(\n    pkg_name: str, pkg_version: str, python_version: str\n) -&gt; str\n</code></pre> <p>Find the closest valid version given the package name and version, and python version.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>pkg_version</code> <code>str</code> <p>The package version to check.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The closest valid version.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import find_closest_version\n&gt;&gt;&gt; find_closest_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"2.0.2\",\n...     python_version=\"3.11\",\n... )\n2.0.2\n&gt;&gt;&gt; find_closest_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"1.0.2\",\n...     python_version=\"3.11\",\n... )\n1.23.2\n</code></pre>"},{"location":"refs/package/#feu.package.is_valid_version","title":"feu.package.is_valid_version","text":"<pre><code>is_valid_version(\n    pkg_name: str, pkg_version: str, python_version: str\n) -&gt; bool\n</code></pre> <p>Indicate if the specified package version is valid for the given Python version.</p> <p>Parameters:</p> Name Type Description Default <code>pkg_name</code> <code>str</code> <p>The package name.</p> required <code>pkg_version</code> <code>str</code> <p>The package version to check.</p> required <code>python_version</code> <code>str</code> <p>The python version.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the specified package version is valid for the given Python version, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.package import is_valid_version\n&gt;&gt;&gt; is_valid_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"2.0.2\",\n...     python_version=\"3.11\",\n... )\nTrue\n&gt;&gt;&gt; is_valid_version(\n...     pkg_name=\"numpy\",\n...     pkg_version=\"1.0.2\",\n...     python_version=\"3.11\",\n... )\nFalse\n</code></pre>"},{"location":"refs/pypi/","title":"Pypi","text":""},{"location":"refs/pypi/#feu.pypi","title":"feu.pypi","text":"<p>Contain PyPI utility functions.</p>"},{"location":"refs/pypi/#feu.pypi.get_pypi_versions","title":"feu.pypi.get_pypi_versions  <code>cached</code>","text":"<pre><code>get_pypi_versions(package: str) -&gt; tuple[str, ...]\n</code></pre> <p>Get the package versions available on PyPI.</p> <p>The package versions are read from PyPI.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name.</p> required <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>A list containing the version strings.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.pypi import get_pypi_versions\n&gt;&gt;&gt; versions = get_pypi_versions(\"requests\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/root/","title":"Main functions","text":""},{"location":"refs/root/#feu","title":"feu","text":"<p>Root package of <code>feu</code>.</p>"},{"location":"refs/root/#feu.compare_version","title":"feu.compare_version","text":"<pre><code>compare_version(\n    package: str, op: Callable, version: str\n) -&gt; bool\n</code></pre> <p>Compare a package version to a given version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package to check.</p> required <code>op</code> <code>Callable</code> <p>Specifies the comparison operator.</p> required <code>version</code> <code>str</code> <p>Specifies the version to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The comparison status.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; from feu import compare_version\n&gt;&gt;&gt; compare_version(\"pytest\", op=operator.ge, version=\"7.3.0\")\nTrue\n</code></pre>"},{"location":"refs/root/#feu.get_package_version","title":"feu.get_package_version","text":"<pre><code>get_package_version(package: str) -&gt; Version | None\n</code></pre> <p>Get the package version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package name.</p> required <p>Returns:</p> Type Description <code>Version | None</code> <p>The package version.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import get_package_version\n&gt;&gt;&gt; get_package_version(\"pytest\")\n&lt;Version('...')&gt;\n</code></pre>"},{"location":"refs/root/#feu.install_package","title":"feu.install_package","text":"<pre><code>install_package(\n    installer: str,\n    package: str,\n    version: str,\n    args: str = \"\",\n) -&gt; None\n</code></pre> <p>Install a package and associated packages by using the secified installer.</p> <p>Parameters:</p> Name Type Description Default <code>installer</code> <code>str</code> <p>The package installer name to use to install the packages.</p> required <code>package</code> <code>str</code> <p>The target package to install.</p> required <code>version</code> <code>str</code> <p>The target version of the package to install.</p> required <code>args</code> <code>str</code> <p>Optional arguments to pass to the package installer. The list of valid arguments depend on the package installer.</p> <code>''</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.install import install_package\n&gt;&gt;&gt; install_package(installer=\"pip\", package=\"pandas\", version=\"2.2.2\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/root/#feu.is_module_available","title":"feu.is_module_available  <code>cached</code>","text":"<pre><code>is_module_available(module: str) -&gt; bool\n</code></pre> <p>Check if a module path is available.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>str</code> <p>The module to check.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import is_module_available\n&gt;&gt;&gt; is_module_available(\"os\")\nTrue\n&gt;&gt;&gt; is_module_available(\"os.path\")\nTrue\n&gt;&gt;&gt; is_module_available(\"missing.module\")\nFalse\n</code></pre>"},{"location":"refs/root/#feu.is_package_available","title":"feu.is_package_available  <code>cached</code>","text":"<pre><code>is_package_available(package: str) -&gt; bool\n</code></pre> <p>Check if a package is available.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the package is available, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import is_package_available\n&gt;&gt;&gt; is_package_available(\"os\")\nTrue\n&gt;&gt;&gt; is_package_available(\"os.path\")\nTrue\n&gt;&gt;&gt; is_package_available(\"my_missing_package\")\nFalse\n</code></pre>"},{"location":"refs/testing/","title":"Testing","text":""},{"location":"refs/testing/#feu.testing","title":"feu.testing","text":"<p>Define some utility functions for testing.</p>"},{"location":"refs/utils/","title":"Utils","text":""},{"location":"refs/utils/#feu.utils","title":"feu.utils","text":"<p>Contain the utility functions.</p>"},{"location":"refs/utils/#feu.utils.command","title":"feu.utils.command","text":"<p>Contain utility functions to run commands.</p>"},{"location":"refs/utils/#feu.utils.command.run_bash_command","title":"feu.utils.command.run_bash_command","text":"<pre><code>run_bash_command(cmd: str) -&gt; None\n</code></pre> <p>Execute a bash command.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>The command to run.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.utils.command import run_bash_command\n&gt;&gt;&gt; run_bash_command(\"ls -l\")  # doctest: +SKIP\n</code></pre>"},{"location":"refs/version/","title":"Version","text":""},{"location":"refs/version/#feu.version","title":"feu.version","text":"<p>Contain functions to manage package versions.</p>"},{"location":"refs/version/#feu.version.compare_version","title":"feu.version.compare_version","text":"<pre><code>compare_version(\n    package: str, op: Callable, version: str\n) -&gt; bool\n</code></pre> <p>Compare a package version to a given version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package to check.</p> required <code>op</code> <code>Callable</code> <p>Specifies the comparison operator.</p> required <code>version</code> <code>str</code> <p>Specifies the version to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>The comparison status.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; from feu import compare_version\n&gt;&gt;&gt; compare_version(\"pytest\", op=operator.ge, version=\"7.3.0\")\nTrue\n</code></pre>"},{"location":"refs/version/#feu.version.filter_stable_versions","title":"feu.version.filter_stable_versions","text":"<pre><code>filter_stable_versions(\n    versions: Sequence[str],\n) -&gt; list[str]\n</code></pre> <p>Filter out pre-release, post-release, and dev-release versions from a list of version strings.</p> A stable version is defined as <ul> <li>Not a pre-release (e.g., alpha <code>a</code>, beta <code>b</code>, release candidate <code>rc</code>)</li> <li>Not a post-release (e.g., <code>1.0.0.post1</code>)</li> <li>Not a development release (e.g., <code>1.0.0.dev1</code>)</li> </ul> <p>Parameters:</p> Name Type Description Default <code>versions</code> <code>Sequence[str]</code> <p>A list of version strings.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A list containing only stable version strings.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.version import filter_stable_versions\n&gt;&gt;&gt; versions = filter_stable_versions(\n...     [\"1.0.0\", \"1.0.0a1\", \"2.0.0\", \"2.0.0.dev1\", \"3.0.0.post1\"]\n... )\n&gt;&gt;&gt; versions\n['1.0.0', '2.0.0']\n</code></pre>"},{"location":"refs/version/#feu.version.filter_valid_versions","title":"feu.version.filter_valid_versions","text":"<pre><code>filter_valid_versions(versions: Sequence[str]) -&gt; list[str]\n</code></pre> <p>Filter out invalid version strings based on PEP 440.</p> <p>A valid version is one that can be parsed by <code>packaging.version.Version</code>. Invalid versions include strings that don't conform to semantic versioning rules.</p> <p>Parameters:</p> Name Type Description Default <code>versions</code> <code>Sequence[str]</code> <p>A list of version strings.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A list containing only valid version strings.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu.version import filter_valid_versions\n&gt;&gt;&gt; versions = filter_valid_versions(\n...     [\n...         \"1.0.0\",\n...         \"1.0.0a1\",\n...         \"2.0.0.post1\",\n...         \"not-a-version\",\n...         \"\",\n...         \"2\",\n...         \"3.0\",\n...         \"v1.0.0\",\n...         \"1.0.0.0.0\",\n...         \"4.0.0.dev1\",\n...     ]\n... )\n&gt;&gt;&gt; versions\n['1.0.0', '1.0.0a1', '2.0.0.post1', '2', '3.0', 'v1.0.0', '1.0.0.0.0', '4.0.0.dev1']\n</code></pre>"},{"location":"refs/version/#feu.version.get_package_version","title":"feu.version.get_package_version","text":"<pre><code>get_package_version(package: str) -&gt; Version | None\n</code></pre> <p>Get the package version.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Specifies the package name.</p> required <p>Returns:</p> Type Description <code>Version | None</code> <p>The package version.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from feu import get_package_version\n&gt;&gt;&gt; get_package_version(\"pytest\")\n&lt;Version('...')&gt;\n</code></pre>"}]}